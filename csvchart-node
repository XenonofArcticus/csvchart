#!/usr/bin/env node
// vimrun! node -i -r ./csvchart-node

const fs = require("fs");
const argv = process.argv.slice(2);

const CSVChart = require("./lib/csvchart.js");

// Exports/returns the global variable "fileData".
global.readFile = readFile = (path) => {
	global.fileData = fs.readFileSync(path, "utf8");

	return global.fileData;

	/* fs.readFile(path, "utf8", (err, data) => {
		if(err) {
			console.error(err);

			return 1;
		}
	}); */
}

// Exports/returns the global variable "csv".
global.readCSV = readCSV = (path) => {
	global.csv = CSVChart.parse(readFile(path));

	return global.csv;
}

// Exports/returns the global variable "ChartJSData".
global.readChartJS = readChartJS = (path) => {
	global.ChartJSData = CSVChart.ChartJS.parse(readFile(path));

	return global.ChartJSData;
}

/* var d = readChartJS("testfiles/testfile-01.csv");
var s = new Set(d.map(i => i.x));
var ss = Array.from(s).sort((v0, v1) => { return v0 - v1; });
var ssl = ss.map(i => Math.log(i));

console.log(s);
console.log(ss);
console.log("Difference: " + (ss[ss.length -1] - ss[0]));
console.log(ssl)
console.log("Difference: " + (ssl[ssl.length -1] - ssl[0])); */

// var data = CSVChart.Tabulator.parse(readFile("testfiles/testfile-01.csv"));
var data = CSVChart.ChartJS.parse(readFile("testfiles/testfile-01.csv"));

console.log(data);
